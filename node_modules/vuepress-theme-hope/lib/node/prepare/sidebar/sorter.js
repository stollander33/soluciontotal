"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSorter = exports.titleNumberDescSorter = exports.titleNumberSorter = exports.titleSorter = exports.fileNumberDescSorter = exports.fileNumberSorter = exports.filenameSorter = exports.dateDescSorter = exports.dateSorter = exports.orderSorter = exports.readmeSorter = void 0;
const readmeSorter = (infoA, infoB) => {
    if (infoA.type === "file" &&
        (infoA.path === "README.md" || infoA.path === "readme.md"))
        return -1;
    if (infoB.type === "file" &&
        (infoB.path === "README.md" || infoB.path === "readme.md"))
        return 1;
    return 0;
};
exports.readmeSorter = readmeSorter;
const orderSorter = (infoA, infoB) => {
    // itemA order is absent
    if (infoA.order === null) {
        // both item do not have orders
        if (infoB.order === null)
            return 0;
        // itemA order is absent while itemB order is present
        return infoB.order;
    }
    // itemA order is present while itemB order is absent
    if (infoB.order === null)
        return -infoA.order;
    // now we are sure both order exisit
    // itemA order is positive
    if (infoA.order > 0) {
        // both order are negative
        if (infoB.order > 0)
            return infoA.order - infoB.order;
        // infoA.order is positive while infoB.order is negative
        return -1;
    }
    // both order are negative
    if (infoB.order < 0)
        return infoA.order - infoB.order;
    // infoA.order is negative while infoB.order is positive
    return 1;
};
exports.orderSorter = orderSorter;
const dateSorter = (infoA, infoB) => {
    if (infoA.frontmatter.date instanceof Date) {
        if (infoB.frontmatter.date instanceof Date)
            return (infoA.frontmatter.date.getTime() - infoB.frontmatter.date.getTime());
        return -1;
    }
    if (infoB.frontmatter.date instanceof Date)
        return 1;
    return 0;
};
exports.dateSorter = dateSorter;
const dateDescSorter = (infoA, infoB) => {
    if (infoA.frontmatter.date instanceof Date) {
        if (infoB.frontmatter.date instanceof Date)
            return (infoB.frontmatter.date.getTime() - infoA.frontmatter.date.getTime());
        return -1;
    }
    if (infoB.frontmatter.date instanceof Date)
        return 1;
    return 0;
};
exports.dateDescSorter = dateDescSorter;
const getFilename = (info) => info.type === "file"
    ? info.path.replace(/\.md$/, "")
    : info.info.prefix.replace(/\/$/, "");
const filenameSorter = (infoA, infoB) => getFilename(infoA).localeCompare(getFilename(infoB));
exports.filenameSorter = filenameSorter;
const fileNumberSorter = (infoA, infoB) => {
    const [, filenameA, fileANumber] = /^(.*?)(\d*)?$/.exec(getFilename(infoA));
    const [, filenameB, fileBNumber] = /^(.*?)(\d*)?$/.exec(getFilename(infoB));
    const result = filenameA.localeCompare(filenameB);
    if (result)
        return result;
    return Number(fileANumber) - Number(fileBNumber);
};
exports.fileNumberSorter = fileNumberSorter;
const fileNumberDescSorter = (infoA, infoB) => {
    const [, filenameA, fileANumber] = /^(.*?)(\d*)?$/.exec(getFilename(infoA));
    const [, filenameB, fileBNumber] = /^(.*?)(\d*)?$/.exec(getFilename(infoB));
    const result = filenameA.localeCompare(filenameB);
    if (result)
        return result;
    return Number(fileBNumber) - Number(fileANumber);
};
exports.fileNumberDescSorter = fileNumberDescSorter;
const getTitle = (info) => info.type === "dir" ? info.info.text : info.title;
const titleSorter = (infoA, infoB) => getTitle(infoA).localeCompare(getTitle(infoB));
exports.titleSorter = titleSorter;
const titleNumberSorter = (infoA, infoB) => {
    const [, titleA, titleANumber] = /^(.*?)(\d*)?$/g.exec(getTitle(infoA));
    const [, titleB, titleBNumber] = /^(.*?)(\d*)?$/g.exec(getTitle(infoB));
    const result = titleA.localeCompare(titleB);
    if (result)
        return result;
    return Number(titleANumber) - Number(titleBNumber);
};
exports.titleNumberSorter = titleNumberSorter;
const titleNumberDescSorter = (infoA, infoB) => {
    const [, titleA, titleANumber] = /^(.*?)(\d*)?$/.exec(getTitle(infoA));
    const [, titleB, titleBNumber] = /^(.*?)(\d*)?$/.exec(getTitle(infoB));
    const result = titleA.localeCompare(titleB);
    if (result)
        return result;
    return Number(titleBNumber) - Number(titleANumber);
};
exports.titleNumberDescSorter = titleNumberDescSorter;
const sortKeyMap = {
    readme: exports.readmeSorter,
    order: exports.orderSorter,
    date: exports.dateSorter,
    "date-desc": exports.dateDescSorter,
    filename: exports.filenameSorter,
    "file-number": exports.fileNumberSorter,
    "file-number-desc": exports.fileNumberDescSorter,
    title: exports.titleSorter,
    "title-number": exports.titleNumberSorter,
    "title-number-desc": exports.titleNumberDescSorter,
};
const availableKeywords = Object.keys(sortKeyMap);
const getSorter = (sorter) => {
    if (typeof sorter === "string" && availableKeywords.includes(sorter))
        return [sortKeyMap[sorter]];
    if (Array.isArray(sorter))
        return sorter
            .filter((sorterKey) => availableKeywords.includes(sorterKey))
            .map((sorterKey) => sortKeyMap[sorterKey]);
    if (typeof sorter === "function")
        return [sorter];
    return [exports.readmeSorter, exports.orderSorter, exports.titleSorter];
};
exports.getSorter = getSorter;
//# sourceMappingURL=sorter.js.map